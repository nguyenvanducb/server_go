package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/gorilla/websocket"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

const (
	MongoDBURI   = "mongodb+srv://hoangminhtri99:Triminh96@cluster0.lu5ww.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
	DBName       = "moneyflow"
	Collection   = "stock_code"
	WebsocketURL = "wss://stream.binance.com:9443/ws/btcusdt@trade"
)

// Struct ch·ª©a d·ªØ li·ªáu giao d·ªãch t·ª´ WebSocket
type TradeMessage struct {
	EventType string `json:"e"`
	EventTime int64  `json:"E"`
	TradeID   int64  `json:"t"`
	Symbol    string `json:"s"`
	Price     string `json:"p"`
	Quantity  string `json:"q"`
}

func main() {
	// 1. K·∫øt n·ªëi MongoDB
	clientOptions := options.Client().ApplyURI(MongoDBURI)
	client, err := mongo.Connect(context.TODO(), clientOptions)
	if err != nil {
		log.Fatal("‚ùå L·ªói khi k·∫øt n·ªëi MongoDB:", err)
	}
	defer client.Disconnect(context.TODO())

	// Ki·ªÉm tra k·∫øt n·ªëi MongoDB
	err = client.Ping(context.TODO(), nil)
	if err != nil {
		log.Fatal("‚ùå Kh√¥ng th·ªÉ ping ƒë·∫øn MongoDB:", err)
	}
	fmt.Println("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn MongoDB!")

	collection := client.Database(DBName).Collection(Collection)

	// 2. K·∫øt n·ªëi WebSocket v√† l·∫Øng nghe
	for {
		fmt.Println("üîÑ K·∫øt n·ªëi l·∫°i WebSocket...")

		conn, _, err := websocket.DefaultDialer.Dial(WebsocketURL, nil)
		if err != nil {
			fmt.Println("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WebSocket:", err)
			time.Sleep(5 * time.Second) // Th·ª≠ l·∫°i sau 5s
			continue
		}
		fmt.Println("‚úÖ K·∫øt n·ªëi WebSocket th√†nh c√¥ng!")

		// G·ª≠i ping ƒë·ªãnh k·ª≥ ƒë·ªÉ gi·ªØ k·∫øt n·ªëi s·ªëng
		go func() {
			for {
				time.Sleep(30 * time.Second)
				if err := conn.WriteMessage(websocket.PingMessage, nil); err != nil {
					fmt.Println("‚ö†Ô∏è L·ªói g·ª≠i ping:", err)
					conn.Close()
					return
				}
			}
		}()

		// L·∫Øng nghe tin nh·∫Øn WebSocket
		for {
			_, message, err := conn.ReadMessage()
			if err != nil {
				fmt.Println("üîå M·∫•t k·∫øt n·ªëi WebSocket:", err)
				conn.Close()
				break // Tho√°t kh·ªèi v√≤ng l·∫∑p ƒë·ªÉ th·ª≠ k·∫øt n·ªëi l·∫°i
			}

			var trade TradeMessage
			if err := json.Unmarshal(message, &trade); err != nil {
				fmt.Println("‚ùå L·ªói gi·∫£i m√£ JSON:", err)
				continue
			}

			// Ch·ªâ c·∫≠p nh·∫≠t n·∫øu l√† BTCUSDT
			if trade.Symbol != "BTCUSDT" {
				continue
			}

			// C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o MongoDB
			filter := bson.M{"symbol": trade.Symbol}
			update := bson.M{
				"$set": bson.M{
					"event_type": trade.EventType,
					"event_time": trade.EventTime,
					"trade_id":   trade.TradeID,
					"price":      trade.Price,
					"quantity":   trade.Quantity,
				},
			}
			opts := options.Update().SetUpsert(true)

			_, err = collection.UpdateOne(context.TODO(), filter, update, opts)
			if err != nil {
				fmt.Println("‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu:", err)
			} else {
				fmt.Println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t giao d·ªãch cho", trade.Symbol)
			}

			// Gi·∫£m t·∫£i k·∫øt n·ªëi
			time.Sleep(300 * time.Millisecond)
		}
	}
}
